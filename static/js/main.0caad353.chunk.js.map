{"version":3,"sources":["components/Planes.jsx","components/PlanesInfo.jsx","utils.js","components/App.js","serviceWorker.js","index.js"],"names":["Planes","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","noOfPlanes","Component","Header","PlanesInfo","planes","map","plane","idx","key","Math","floor","R","getCurrentLocation","prevLocation","Promise","resolve","reject","currentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","timestamp","Error","toRadians","angle","PI","toDegrees","getBoundingBox","location","prevBoundingBox","lamin","lamax","lomin","cos","lomax","sendNotification","totalPlanes","serviceWorker","ready","then","registration","showNotification","concat","API_URL","App","_process","result","boundingBox","query","keys","k","encodeURIComponent","join","setState","lastAcquiredAt","fetch","res","json","resJson","states","length","setInterval","style","textAlign","fontWeight","src_components_Planes","src_components_PlanesInfo","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_components_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0caad353.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Planes.css\";\nclass Planes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"Planes-root\">\n        <div className=\"Planes-container\">\n          <h4 className=\"Planes-noOfPlanes\">{this.props.noOfPlanes}</h4>\n          <span className=\"Planes-title\">Planes within 10 km</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Planes;\n","import React, { Component } from \"react\";\nimport \"./PlanesInfo.css\";\n\nconst Header = (\n  <div className=\"PlanesInfo-header\">\n    <p>CallSign</p>\n    <p>Country</p>\n    <p>Speed &nbsp; (km/hr)</p>\n    <p>Altitude (ft)</p>\n  </div>\n);\n\nclass PlanesInfo extends Component {\n  render() {\n    return (\n      <div className=\"PlanesInfo-root\">\n        {Header}\n        <div className=\"PlanesInfo-\">\n          {this.props.planes &&\n            this.props.planes.map((plane, idx) => {\n              return (\n                <div key={plane[0]} className=\"PlanesInfo-row\">\n                  <p>{plane[1] || \"N/A\"}</p>\n                  <p>{plane[2] || \"N/A\"}</p>\n                  <p>{Math.floor(plane[9]*3.6) || \"N/A\"}</p>\n                  <p>{Math.floor(plane[13] * 3.28084) || \"N/A\"}</p>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlanesInfo;\n","const R = 6371; // earth radius in km\nconst radius = 10; // km\n\nexport const getCurrentLocation = (prevLocation) => {\n    return new Promise((resolve, reject) => {\n        let currentLocation;\n        if ('geolocation' in navigator) {\n\n            navigator.geolocation.getCurrentPosition(function (position) {\n                currentLocation = prevLocation = {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                }\n\n                resolve({\n                    currentLocation,\n                    timestamp: position.timestamp\n                })\n            })\n\n        } else {\n            reject(new Error(\"Geolocation not available!\"))\n            // TODO\n        }\n    })\n}\n\nfunction toRadians(angle) {\n    return angle * (Math.PI / 180);\n}\n\nfunction toDegrees(angle) {\n    return angle * (180 / Math.PI);\n}\n\n\n\nexport const getBoundingBox = (location, prevLocation, prevBoundingBox) => {\n    let currentBoundingBox;\n\n    if (prevLocation && location.latitude === prevLocation.latitude && location.longitude === prevLocation.longitude && prevBoundingBox) {\n        return prevBoundingBox;\n    } else {\n        const latitude = location.latitude;\n        const longitude = location.longitude;\n\n        const lamin = latitude - toDegrees(radius / R);\n        const lamax = latitude + toDegrees(radius / R);\n        const lomin = longitude - toDegrees(radius / R / Math.cos(toRadians(latitude)));\n        const lomax = longitude + toDegrees(radius / R / Math.cos(toRadians(latitude)));\n\n        currentBoundingBox = prevBoundingBox = {\n            lamin,\n            lamax,\n            lomin,\n            lomax\n        };\n\n        return currentBoundingBox;\n    }\n\n}\n\nexport const sendNotification = (totalPlanes) => {\n    navigator.serviceWorker.ready.then(function (registration) {\n        registration.showNotification(`There are currently ${totalPlanes} planes flying around you.`);\n\n    });\n}","import React, {\n  Component\n} from \"react\";\nimport \"./App.css\";\nimport Planes from \"./Planes\";\nimport PlanesInfo from \"./PlanesInfo\";\n\nimport {\n  getCurrentLocation,\n  getBoundingBox,\n  sendNotification\n} from \"../utils\";\nconst REFRESH_INTERVAL = 15 * 1000;\nlet API_URL = \"https://opensky-network.org/api/states/all?\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noOfPlanes: 0,\n      planes: [],\n      lastAcquiredAt: null,\n      prevLocation: null,\n      prevBoundingBox: null\n    };\n  }\n  _process = () => {\n    getCurrentLocation(this.state.prevLocation).then(result => {\n        return result;\n      })\n      .then((result) => {\n        const boundingBox = getBoundingBox(result.currentLocation, this.state.prevLocation);\n\n        let query = Object.keys(boundingBox)\n          .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(boundingBox[k]))\n          .join('&');\n\n        // Now that we have queried, let's set the state;\n\n        this.setState({\n          prevLocation: result.currentLocation,\n          lastAcquiredAt: result.timestamp\n        })\n\n        const endpoint = API_URL + query;\n        return fetch(endpoint);\n      })\n      .then(res => res.json())\n      .then(resJson => {\n        this.setState({\n          noOfPlanes: resJson.states.length,\n          planes: resJson.states\n        }, () => {\n          sendNotification(this.state.noOfPlanes);\n        });\n\n      })\n  }\n\n  componentDidMount() {\n    this._process();\n    setInterval(this._process, REFRESH_INTERVAL);\n  }\n\n  render() {\n    return ( <\n      div className = \"App\" >\n      <\n      div className = \"header\" >\n      <\n      p style = {\n        {\n          textAlign: \"center\"\n        }\n      } > Air < span style = {\n        {\n          fontWeight: 100\n        }\n      } > planes < /span></p >\n      <\n      /div>  <\n      Planes noOfPlanes = {\n        this.state.noOfPlanes\n      }\n      /> <\n      PlanesInfo planes = {\n        this.state.planes\n      }\n      />  <\n      /div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}